{"ast":null,"code":"import * as Papa from 'papaparse';\nimport { map } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AirlineCodesService {\n  constructor(http) {\n    this.http = http;\n    this.AirlineCodes = '../assets/csv/airline-codes.csv';\n  }\n  getCsvData() {\n    return this.http.get(this.AirlineCodes, {\n      responseType: 'text'\n    }).pipe(map(res => {\n      console.log('res ', res);\n      return this.csvJSON(res);\n    }));\n  }\n  csvJSON(csv) {\n    console.log('csvJSON ', csv);\n    const lines = csv.split(/[\\r\\n]+/);\n    for (let i = 0; i < lines.length; i++) {\n      lines[i] = lines[i].replace(/\\s/, '');\n    }\n    const result = [];\n    const headers = lines[0].split(',');\n    for (let i = 1; i < lines.length; i++) {\n      const obj = {};\n      const currentline = lines[i].split(',');\n      for (let j = 0; j < headers.length; j++) {\n        obj[headers[j].toString()] = currentline[j];\n      }\n      result.push(obj);\n    }\n    console.log('csvJSON ', result);\n    return result;\n    // return JSON.stringify(result); //JSON\n  }\n\n  parseCSVData(csvData) {\n    return new Promise((resolve, reject) => {\n      Papa.parse(csvData, {\n        complete: function (results) {\n          resolve(results.data);\n        },\n        error: function (error) {\n          reject(error);\n        }\n      });\n    });\n  }\n  static #_ = this.ɵfac = function AirlineCodesService_Factory(t) {\n    return new (t || AirlineCodesService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AirlineCodesService,\n    factory: AirlineCodesService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"mappings":"AAGA,OAAO,KAAKA,IAAI,MAAM,WAAW;AACjC,SAAqBC,GAAG,QAAQ,MAAM;;;AAStC,OAAM,MAAOC,mBAAmB;EAG5BC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAFf,iBAAY,GAAG,iCAAiC;EAEjB;EAExCC,UAAU;IACN,OAAO,IAAI,CAACD,IAAI,CACXE,GAAG,CAAC,IAAI,CAACC,YAAY,EAAE;MAAEC,YAAY,EAAE;IAAM,CAAE,CAAC,CAChDC,IAAI,CAACR,GAAG,CAACS,GAAG,IAAG;MACZC,OAAO,CAACC,GAAG,CAAC,MAAM,EAAEF,GAAG,CAAC;MACxB,OAAO,IAAI,CAACG,OAAO,CAACH,GAAG,CAAC;IAC5B,CAAC,CAAC,CAAC;EACX;EAGAG,OAAO,CAACC,GAAQ;IACZH,OAAO,CAACC,GAAG,CAAC,UAAU,EAAEE,GAAG,CAAC;IAC5B,MAAMC,KAAK,GAAGD,GAAG,CAACE,KAAK,CAAC,SAAS,CAAC;IAClC,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,KAAK,CAACG,MAAM,EAAED,CAAC,EAAE,EAAE;MACnCF,KAAK,CAACE,CAAC,CAAC,GAAGF,KAAK,CAACE,CAAC,CAAC,CAACE,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC;;IAEzC,MAAMC,MAAM,GAAG,EAAE;IACjB,MAAMC,OAAO,GAAGN,KAAK,CAAC,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC;IAEnC,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,KAAK,CAACG,MAAM,EAAED,CAAC,EAAE,EAAE;MACnC,MAAMK,GAAG,GAAQ,EAAE;MACnB,MAAMC,WAAW,GAAGR,KAAK,CAACE,CAAC,CAAC,CAACD,KAAK,CAAC,GAAG,CAAC;MACvC,KAAK,IAAIQ,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,OAAO,CAACH,MAAM,EAAEM,CAAC,EAAE,EAAE;QACrCF,GAAG,CAACD,OAAO,CAACG,CAAC,CAAC,CAACC,QAAQ,EAAE,CAAC,GAAGF,WAAW,CAACC,CAAC,CAAC;;MAE/CJ,MAAM,CAACM,IAAI,CAACJ,GAAG,CAAC;;IAEpBX,OAAO,CAACC,GAAG,CAAC,UAAU,EAAEQ,MAAM,CAAC;IAC/B,OAAOA,MAAM;IACb;EACJ;;EAGOO,YAAY,CAACC,OAAe;IAC/B,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAI;MACnC/B,IAAI,CAACgC,KAAK,CAACJ,OAAO,EAAE;QAChBK,QAAQ,EAAE,UAAUC,OAA8C;UAC9DJ,OAAO,CAACI,OAAO,CAACC,IAAI,CAAC;QACzB,CAAC;QACDC,KAAK,EAAE,UAAUA,KAAY;UACzBL,MAAM,CAACK,KAAK,CAAC;QACjB;OACH,CAAC;IACN,CAAC,CAAC;EACN;EAAC;qBAjDQlC,mBAAmB;EAAA;EAAA;WAAnBA,mBAAmB;IAAAmC,SAAnBnC,mBAAmB;IAAAoC,YALhB;EAAM","names":["Papa","map","AirlineCodesService","constructor","http","getCsvData","get","AirlineCodes","responseType","pipe","res","console","log","csvJSON","csv","lines","split","i","length","replace","result","headers","obj","currentline","j","toString","push","parseCSVData","csvData","Promise","resolve","reject","parse","complete","results","data","error","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\tsternberg\\svg-sprite-generator\\src\\app\\airline-codes.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport * as csvParser from 'csv-parser';\r\nimport { Readable } from 'stream';\r\nimport * as Papa from 'papaparse';\r\nimport { Observable, map } from 'rxjs';\r\nimport { HttpClient, HttpParams } from '@angular/common/http';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\n\r\n\r\n\r\nexport class AirlineCodesService {\r\n    readonly AirlineCodes = '../assets/csv/airline-codes.csv';\r\n\r\n    constructor(private http: HttpClient) { }\r\n\r\n    getCsvData(): Observable<any> {\r\n        return this.http\r\n            .get(this.AirlineCodes, { responseType: 'text' })\r\n            .pipe(map(res => {\r\n                console.log('res ', res)\r\n                return this.csvJSON(res);\r\n            }));\r\n    }\r\n\r\n\r\n    csvJSON(csv: any) {\r\n        console.log('csvJSON ', csv)\r\n        const lines = csv.split(/[\\r\\n]+/);\r\n        for (let i = 0; i < lines.length; i++) {\r\n            lines[i] = lines[i].replace(/\\s/, '');\r\n        }\r\n        const result = [];\r\n        const headers = lines[0].split(',');\r\n\r\n        for (let i = 1; i < lines.length; i++) {\r\n            const obj: any = {};\r\n            const currentline = lines[i].split(',');\r\n            for (let j = 0; j < headers.length; j++) {\r\n                obj[headers[j].toString()] = currentline[j];\r\n            }\r\n            result.push(obj);\r\n        }\r\n        console.log('csvJSON ', result)\r\n        return result;\r\n        // return JSON.stringify(result); //JSON\r\n    }\r\n\r\n\r\n    public parseCSVData(csvData: string): Promise<any[]> {\r\n        return new Promise((resolve, reject) => {\r\n            Papa.parse(csvData, {\r\n                complete: function (results: { data: any[] | PromiseLike<any[]>; }) {\r\n                    resolve(results.data);\r\n                },\r\n                error: function (error: Error) {\r\n                    reject(error);\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}