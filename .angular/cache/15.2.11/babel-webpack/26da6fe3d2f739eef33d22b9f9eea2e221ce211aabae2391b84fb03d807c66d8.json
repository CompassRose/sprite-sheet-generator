{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/tsternberg/svg-sprite-generator/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../airline-codes.service\";\nimport * as i2 from \"@angular/common/http\";\nimport * as i3 from \"@angular/common\";\nfunction SpriteGeneratorComponent_div_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 4)(1, \"h3\");\n    i0.ɵɵtext(2, \"Generated Sprite Sheet\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(3, \"img\", 5);\n    i0.ɵɵelementStart(4, \"a\", 6);\n    i0.ɵɵtext(5, \"Download Sprite Sheet\");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"src\", ctx_r0.spriteSheetUrl, i0.ɵɵsanitizeUrl);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"href\", ctx_r0.spriteSheetUrl, i0.ɵɵsanitizeUrl);\n  }\n}\nexport class SpriteGeneratorComponent {\n  constructor(airlineCodesService, http) {\n    this.airlineCodesService = airlineCodesService;\n    this.http = http;\n    this.files = [];\n    this.comparableAirlineCodeName = [];\n    this.spriteSheetUrl = null;\n    this.metadata = [];\n    this.AirlineCodes = '../../assets/json/airlineCodes.json';\n    this.columns = 15; // Number of columns in the sprite sheet\n    console.log('this.AirlineCodes ', this.airlineCodesService);\n  }\n  ngOnInit() {\n    this.getCodes().subscribe(data => {\n      this.airlineCodes = JSON.parse(data);\n      // console.log('this.airlineCodes ', this.airlineCodes)\n      this.sortAirlineDescriptions();\n    });\n  }\n  sortAirlineDescriptions() {\n    //console.log('this.airlineCodes ', this.airlineCodes)\n    this.airlineCodes.sort((a, b) => a.Description.localeCompare(b.Description));\n  }\n  getCodes() {\n    return this.http.get(this.AirlineCodes, {\n      responseType: 'text'\n    });\n  }\n  onFileSelected(event) {\n    this.files = Array.from(event.target.files);\n    //console.log('event.target.files', event.target.files);\n    this.comparableAirlineCodeName = this.files.map(file => {\n      let fileName = file.name;\n      fileName = fileName.replace('.svg', ''); // remove .svg\n      //fileName = fileName.trim(); // remove leading and trailing spaces\n      // console.log('this.files......... ', { ...file, name: fileName });\n      return {\n        ...file,\n        name: fileName\n      }; // return new file object with updated name\n    });\n\n    console.log('this.files comparableAirlineCodeName ', this.comparableAirlineCodeName);\n  }\n  findCodes() {\n    let matches = this.airlineCodes.filter((code, i) => {\n      return this.comparableAirlineCodeName.some(comparable => {\n        return comparable.name === code.Description;\n      });\n    });\n    console.log('matches', matches);\n  }\n  generateSpriteSheet() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      if (_this.files.length === 0) {\n        alert('Please select some SVG files');\n        return;\n      }\n      const parser = new DOMParser();\n      const svg = yield Promise.all(_this.files.map( /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator(function* (file) {\n          const svgText = yield _this.readFileAsText(file);\n          const doc = parser.parseFromString(svgText, 'image/svg+xml');\n          const svgElement = doc.documentElement;\n          const width = svgElement.getAttribute('width');\n          const height = svgElement.getAttribute('height');\n          console.log('width ', width);\n          return svgText;\n        });\n        return function (_x) {\n          return _ref.apply(this, arguments);\n        };\n      }()));\n      //console.log('file ', this.files[3])\n      const svgs = yield Promise.all(_this.files.map(file => _this.readFileAsText(file)));\n      const size = 480; // Size of each sprite (assuming square sprites for simplicity)\n      const rows = Math.ceil(svgs.length / _this.columns);\n      const canvas = document.createElement('canvas');\n      canvas.width = size * _this.columns;\n      canvas.height = size * rows;\n      const ctx = canvas.getContext('2d');\n      _this.metadata = [];\n      yield Promise.all(svgs.map((svg, index) => _this.drawSvgToCanvas(ctx, svg, index, size)));\n      _this.spriteSheetUrl = canvas.toDataURL('image/png');\n      _this.generateMetadataFile();\n    })();\n  }\n  readFileAsText(file) {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.onload = () => resolve(reader.result);\n      reader.onerror = reject;\n      reader.readAsText(file);\n    });\n  }\n  drawSvgToCanvas(ctx, svg, index, size) {\n    console.log('drawSvgToCanvas', size);\n    return new Promise((resolve, reject) => {\n      const img = new Image();\n      img.onload = () => {\n        const col = index % this.columns;\n        const row = Math.floor(index / this.columns);\n        const x = col * size;\n        const y = row * size;\n        const width = size;\n        const height = size;\n        console.log('width ', width);\n        ctx?.drawImage(img, x, y, width, height);\n        this.metadata.push({\n          name: this.files[index].name,\n          x,\n          y,\n          width,\n          height\n        });\n        resolve();\n      };\n      img.onerror = reject;\n      img.src = `data:image/svg+xml;base64,${btoa(svg)}`;\n    });\n  }\n  generateMetadataFile() {\n    const metadataBlob = new Blob([JSON.stringify(this.metadata, null, 2)], {\n      type: 'application/json'\n    });\n    console.log('metadataBlob ', metadataBlob);\n    const metadataUrl = URL.createObjectURL(metadataBlob);\n    const downloadLink = document.createElement('a');\n    downloadLink.href = metadataUrl;\n    downloadLink.download = 'sprite-sheet-metadata.json';\n    downloadLink.textContent = 'Download Metadata';\n    console.log('downloadLink ', this.metadata);\n    this.findCodes();\n    const output = document.getElementById('output');\n    if (output) {\n      output.appendChild(downloadLink);\n    }\n  }\n  static #_ = this.ɵfac = function SpriteGeneratorComponent_Factory(t) {\n    return new (t || SpriteGeneratorComponent)(i0.ɵɵdirectiveInject(i1.AirlineCodesService), i0.ɵɵdirectiveInject(i2.HttpClient));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: SpriteGeneratorComponent,\n    selectors: [[\"app-sprite-generator\"]],\n    decls: 7,\n    vars: 1,\n    consts: [[1, \"container\"], [\"type\", \"file\", \"multiple\", \"\", \"accept\", \".svg\", 3, \"change\"], [3, \"click\"], [\"id\", \"output\", 4, \"ngIf\"], [\"id\", \"output\"], [\"alt\", \"Sprite Sheet\", 3, \"src\"], [\"download\", \"sprite-sheet.png\", 3, \"href\"]],\n    template: function SpriteGeneratorComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"h1\");\n        i0.ɵɵtext(2, \"SVG Sprite Sheet Generator\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(3, \"input\", 1);\n        i0.ɵɵlistener(\"change\", function SpriteGeneratorComponent_Template_input_change_3_listener($event) {\n          return ctx.onFileSelected($event);\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"button\", 2);\n        i0.ɵɵlistener(\"click\", function SpriteGeneratorComponent_Template_button_click_4_listener() {\n          return ctx.generateSpriteSheet();\n        });\n        i0.ɵɵtext(5, \"Generate Sprite Sheet\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(6, SpriteGeneratorComponent_div_6_Template, 6, 2, \"div\", 3);\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(6);\n        i0.ɵɵproperty(\"ngIf\", ctx.spriteSheetUrl);\n      }\n    },\n    dependencies: [i3.NgIf],\n    styles: [\".container[_ngcontent-%COMP%] {\\r\\n  text-align: center;\\r\\n  margin-top: 50px;\\r\\n}\\r\\n\\r\\n#output[_ngcontent-%COMP%] {\\r\\n  margin-top: 20px;\\r\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvc3ByaXRlLWdlbmVyYXRvci9zcHJpdGUtZ2VuZXJhdG9yLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDRSxrQkFBa0I7RUFDbEIsZ0JBQWdCO0FBQ2xCOztBQUVBO0VBQ0UsZ0JBQWdCO0FBQ2xCIiwic291cmNlc0NvbnRlbnQiOlsiLmNvbnRhaW5lciB7XHJcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG4gIG1hcmdpbi10b3A6IDUwcHg7XHJcbn1cclxuXHJcbiNvdXRwdXQge1xyXG4gIG1hcmdpbi10b3A6IDIwcHg7XHJcbn0iXSwic291cmNlUm9vdCI6IiJ9 */\"]\n  });\n}","map":{"version":3,"mappings":"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","names":["i0","SpriteGeneratorComponent","constructor","airlineCodesService","http","console","log","ngOnInit","getCodes","subscribe","data","airlineCodes","JSON","parse","sortAirlineDescriptions","sort","a","b","Description","localeCompare","get","AirlineCodes","responseType","onFileSelected","event","files","Array","from","target","comparableAirlineCodeName","map","file","fileName","name","replace","findCodes","matches","filter","code","i","some","comparable","generateSpriteSheet","length","alert","parser","DOMParser","svg","Promise","all","svgText","readFileAsText","doc","parseFromString","svgElement","documentElement","width","getAttribute","height","svgs","size","rows","Math","ceil","columns","canvas","document","createElement","ctx","getContext","metadata","index","drawSvgToCanvas","spriteSheetUrl","toDataURL","generateMetadataFile","resolve","reject","reader","FileReader","onload","result","onerror","readAsText","img","Image","col","row","floor","x","y","drawImage","push","src","btoa","metadataBlob","Blob","stringify","type","metadataUrl","URL","createObjectURL","downloadLink","href","download","textContent","output","getElementById","appendChild","selectors","decls","vars","consts","template"],"sourceRoot":"","sources":["C:\\Users\\tsternberg\\svg-sprite-generator\\src\\app\\sprite-generator\\sprite-generator.component.html","C:\\Users\\tsternberg\\svg-sprite-generator\\src\\app\\sprite-generator\\sprite-generator.component.ts"],"sourcesContent":["<div class=\"container\">\n   <h1>SVG Sprite Sheet Generator</h1>\n   <input type=\"file\"\n      (change)=\"onFileSelected($event)\"\n      multiple\n      accept=\".svg\">\n   <button (click)=\"generateSpriteSheet()\">Generate Sprite Sheet</button>\n   <div id=\"output\"\n      *ngIf=\"spriteSheetUrl\">\n      <h3>Generated Sprite Sheet</h3>\n      <img [src]=\"spriteSheetUrl\"\n         alt=\"Sprite Sheet\">\n      <a [href]=\"spriteSheetUrl\"\n         download=\"sprite-sheet.png\">Download Sprite Sheet</a>\n\n      <!-- Metadata download link will be appended here -->\n   </div>\n   <!-- <button (click)=\"getCsvData()\">configure codes</button> -->\n   <!-- <button (click)=\"parseAirportCodes()\">configure codes</button> -->\n</div>","import { Component, OnInit } from '@angular/core';\nimport { AirlineCodesService } from '../airline-codes.service';\nimport { Observable, from, map, mergeMap } from 'rxjs';\nimport { HttpClient } from '@angular/common/http';\n\n\n@Component({\n  selector: 'app-sprite-generator',\n  templateUrl: './sprite-generator.component.html',\n  styleUrls: ['./sprite-generator.component.css']\n})\nexport class SpriteGeneratorComponent implements OnInit {\n\n  files: File[] = [];\n  comparableAirlineCodeName: any[] = [];\n  spriteSheetUrl: string | null = null;\n  metadata: any[] = [];\n\n  readonly AirlineCodes = '../../assets/json/airlineCodes.json';\n\n  columns: number = 15;  // Number of columns in the sprite sheet\n  public airlineCodes: any;\n  constructor(public airlineCodesService: AirlineCodesService, public http: HttpClient) {\n    console.log('this.AirlineCodes ', this.airlineCodesService)\n  }\n\n  public ngOnInit(): void {\n\n\n    this.getCodes()\n      .subscribe((data) => {\n        this.airlineCodes = JSON.parse(data)\n        // console.log('this.airlineCodes ', this.airlineCodes)\n        this.sortAirlineDescriptions()\n      })\n  }\n\n  public sortAirlineDescriptions(): void {\n    //console.log('this.airlineCodes ', this.airlineCodes)\n    this.airlineCodes.sort((a: any, b: any) => a.Description.localeCompare(b.Description));\n  }\n\n  public getCodes(): Observable<string> {\n    return this.http.get(this.AirlineCodes, { responseType: 'text' });\n  }\n\n\n  onFileSelected(event: any): void {\n    this.files = Array.from(event.target.files);\n\n    //console.log('event.target.files', event.target.files);\n\n    this.comparableAirlineCodeName = this.files.map(file => {\n      let fileName = file.name;\n      fileName = fileName.replace('.svg', ''); // remove .svg\n      //fileName = fileName.trim(); // remove leading and trailing spaces\n      // console.log('this.files......... ', { ...file, name: fileName });\n      return { ...file, name: fileName }; // return new file object with updated name\n    });\n\n    console.log('this.files comparableAirlineCodeName ', this.comparableAirlineCodeName);\n\n  }\n\n\n  public findCodes(): any {\n\n    let matches = this.airlineCodes.filter((code: any, i: number) => {\n      return this.comparableAirlineCodeName.some(comparable => {\n        return comparable.name === code.Description\n      })\n\n    });\n    console.log('matches', matches)\n  }\n\n\n  public async generateSpriteSheet(): Promise<void> {\n\n    if (this.files.length === 0) {\n      alert('Please select some SVG files');\n      return;\n    }\n\n    const parser = new DOMParser();\n    const svg = await Promise.all(this.files.map(async file => {\n      const svgText = await this.readFileAsText(file);\n      const doc = parser.parseFromString(svgText, 'image/svg+xml');\n      const svgElement = doc.documentElement;\n      const width = svgElement.getAttribute('width');\n      const height = svgElement.getAttribute('height');\n      console.log('width ', width);\n      return svgText;\n    }));\n    //console.log('file ', this.files[3])\n    const svgs = await Promise.all(this.files.map(file => this.readFileAsText(file)));\n\n    const size = 480;  // Size of each sprite (assuming square sprites for simplicity)\n    const rows = Math.ceil(svgs.length / this.columns);\n    const canvas = document.createElement('canvas');\n    canvas.width = size * this.columns;\n    canvas.height = size * rows;\n    const ctx = canvas.getContext('2d');\n\n    this.metadata = [];\n\n    await Promise.all(svgs.map((svg, index) => this.drawSvgToCanvas(ctx, svg, index, size)));\n\n    this.spriteSheetUrl = canvas.toDataURL('image/png');\n\n    this.generateMetadataFile();\n\n  }\n\n  private readFileAsText(file: File): Promise<string> {\n\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.onload = () => resolve(reader.result as string);\n      reader.onerror = reject;\n      reader.readAsText(file);\n    });\n  }\n\n  private drawSvgToCanvas(ctx: CanvasRenderingContext2D | null, svg: string, index: number, size: number): Promise<void> {\n    console.log('drawSvgToCanvas', size)\n    return new Promise((resolve, reject) => {\n      const img = new Image();\n\n      img.onload = () => {\n        const col = index % this.columns;\n        const row = Math.floor(index / this.columns);\n        const x = col * size;\n        const y = row * size;\n        const width = size;\n        const height = size;\n        console.log('width ', width)\n        ctx?.drawImage(img, x, y, width, height);\n\n        this.metadata.push({\n          name: this.files[index].name,\n          x,\n          y,\n          width,\n          height\n        });\n\n        resolve();\n      };\n      img.onerror = reject;\n      img.src = `data:image/svg+xml;base64,${btoa(svg)}`;\n    });\n  }\n\n  private generateMetadataFile(): void {\n    const metadataBlob = new Blob([JSON.stringify(this.metadata, null, 2)], { type: 'application/json' });\n    console.log('metadataBlob ', metadataBlob)\n    const metadataUrl = URL.createObjectURL(metadataBlob);\n\n    const downloadLink = document.createElement('a');\n    downloadLink.href = metadataUrl;\n    downloadLink.download = 'sprite-sheet-metadata.json';\n    downloadLink.textContent = 'Download Metadata';\n\n    console.log('downloadLink ', this.metadata)\n    this.findCodes();\n    const output = document.getElementById('output');\n    if (output) {\n      output.appendChild(downloadLink);\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}