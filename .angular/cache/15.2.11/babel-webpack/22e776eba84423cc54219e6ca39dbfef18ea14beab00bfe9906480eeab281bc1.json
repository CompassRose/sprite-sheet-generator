{"ast":null,"code":"import * as Papa from 'papaparse';\nimport * as i0 from \"@angular/core\";\nexport class AirlineCodesService {\n  constructor() {\n    this.AirlineCodes = '../assets/csv/airline-codes.csv';\n  }\n  parseCSVData(csvData) {\n    return new Promise((resolve, reject) => {\n      Papa.parse(csvData, {\n        complete: function (results) {\n          resolve(results.data);\n        },\n        error: function (error) {\n          reject(error);\n        }\n      });\n    });\n  }\n  static #_ = this.ɵfac = function AirlineCodesService_Factory(t) {\n    return new (t || AirlineCodesService)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AirlineCodesService,\n    factory: AirlineCodesService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"mappings":"AAGA,OAAO,KAAKA,IAAI,MAAM,WAAW;;AAQjC,OAAM,MAAOC,mBAAmB;EANhCC;IAOa,iBAAY,GAAG,iCAAiC;;EAElDC,YAAY,CAACC,OAAe;IAC/B,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAI;MACnCP,IAAI,CAACQ,KAAK,CAACJ,OAAO,EAAE;QAChBK,QAAQ,EAAE,UAAUC,OAA8C;UAC9DJ,OAAO,CAACI,OAAO,CAACC,IAAI,CAAC;QACzB,CAAC;QACDC,KAAK,EAAE,UAAUA,KAAK;UAClBL,MAAM,CAACK,KAAK,CAAC;QACjB;OACH,CAAC;IACN,CAAC,CAAC;EACN;EAAC;qBAdQX,mBAAmB;EAAA;EAAA;WAAnBA,mBAAmB;IAAAY,SAAnBZ,mBAAmB;IAAAa,YALhB;EAAM","names":["Papa","AirlineCodesService","constructor","parseCSVData","csvData","Promise","resolve","reject","parse","complete","results","data","error","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\tsternberg\\svg-sprite-generator\\src\\app\\airline-codes.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport * as csvParser from 'csv-parser';\r\nimport { Readable } from 'stream';\r\nimport * as Papa from 'papaparse';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\n\r\n\r\n\r\nexport class AirlineCodesService {\r\n    readonly AirlineCodes = '../assets/csv/airline-codes.csv';\r\n\r\n    public parseCSVData(csvData: string): Promise<any[]> {\r\n        return new Promise((resolve, reject) => {\r\n            Papa.parse(csvData, {\r\n                complete: function (results: { data: any[] | PromiseLike<any[]>; }) {\r\n                    resolve(results.data);\r\n                },\r\n                error: function (error) {\r\n                    reject(error);\r\n                }\r\n            });\r\n        });\r\n    }\r\n}\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}