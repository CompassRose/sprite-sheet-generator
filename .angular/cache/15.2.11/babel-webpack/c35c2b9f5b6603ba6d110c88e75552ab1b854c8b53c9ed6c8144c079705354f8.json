{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/tsternberg/svg-sprite-generator/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nfunction SpriteGeneratorComponent_div_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 4)(1, \"h3\");\n    i0.ɵɵtext(2, \"Generated Sprite Sheet\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(3, \"img\", 5);\n    i0.ɵɵelementStart(4, \"a\", 6);\n    i0.ɵɵtext(5, \"Download Sprite Sheet\");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"src\", ctx_r0.spriteSheetUrl, i0.ɵɵsanitizeUrl);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"href\", ctx_r0.spriteSheetUrl, i0.ɵɵsanitizeUrl);\n  }\n}\nexport class SpriteGeneratorComponent {\n  constructor() {\n    this.files = [];\n    this.spriteSheetUrl = null;\n    this.metadata = [];\n  }\n  onFileSelected(event) {\n    this.files = Array.from(event.target.files);\n  }\n  generateSpriteSheet() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      if (_this.files.length === 0) {\n        alert('Please select some SVG files');\n        return;\n      }\n      const svgs = yield Promise.all(_this.files.map(file => _this.readFileAsText(file)));\n      console.log('svgs.length ', svgs.length);\n      const canvas = document.createElement('canvas');\n      const size = 100; // Size of each sprite (assuming square sprites for simplicity)\n      canvas.width = size * svgs.length;\n      canvas.height = size;\n      const ctx = canvas.getContext('2d');\n      _this.metadata = [];\n      yield Promise.all(svgs.map((svg, index) => _this.drawSvgToCanvas(ctx, svg, index, size)));\n      _this.spriteSheetUrl = canvas.toDataURL('image/png');\n      _this.generateMetadataFile();\n    })();\n  }\n  readFileAsText(file) {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.onload = () => resolve(reader.result);\n      reader.onerror = reject;\n      reader.readAsText(file);\n    });\n  }\n  drawSvgToCanvas(ctx, svg, index, size) {\n    return new Promise((resolve, reject) => {\n      const img = new Image();\n      img.onload = () => {\n        const x = index * size;\n        const y = 0;\n        const width = size;\n        const height = size;\n        ctx?.drawImage(img, x, y, width, height);\n        this.metadata.push({\n          name: this.files[index].name,\n          x,\n          y,\n          width,\n          height\n        });\n        resolve();\n      };\n      img.onerror = reject;\n      img.src = `data:image/svg+xml;base64,${btoa(svg)}`;\n    });\n  }\n  generateMetadataFile() {\n    const metadataBlob = new Blob([JSON.stringify(this.metadata, null, 2)], {\n      type: 'application/json'\n    });\n    const metadataUrl = URL.createObjectURL(metadataBlob);\n    const downloadLink = document.createElement('a');\n    downloadLink.href = metadataUrl;\n    downloadLink.download = 'sprite-sheet-metadata.json';\n    downloadLink.textContent = 'Download Metadata';\n    console.log('downloadLink ', this.metadata);\n    const output = document.getElementById('output');\n    if (output) {\n      output.appendChild(downloadLink);\n    }\n  }\n  static #_ = this.ɵfac = function SpriteGeneratorComponent_Factory(t) {\n    return new (t || SpriteGeneratorComponent)();\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: SpriteGeneratorComponent,\n    selectors: [[\"app-sprite-generator\"]],\n    decls: 7,\n    vars: 1,\n    consts: [[1, \"container\"], [\"type\", \"file\", \"multiple\", \"\", \"accept\", \".svg\", 3, \"change\"], [3, \"click\"], [\"id\", \"output\", 4, \"ngIf\"], [\"id\", \"output\"], [\"alt\", \"Sprite Sheet\", 3, \"src\"], [\"download\", \"sprite-sheet.png\", 3, \"href\"]],\n    template: function SpriteGeneratorComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"h1\");\n        i0.ɵɵtext(2, \"SVG Sprite Sheet Generator\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(3, \"input\", 1);\n        i0.ɵɵlistener(\"change\", function SpriteGeneratorComponent_Template_input_change_3_listener($event) {\n          return ctx.onFileSelected($event);\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"button\", 2);\n        i0.ɵɵlistener(\"click\", function SpriteGeneratorComponent_Template_button_click_4_listener() {\n          return ctx.generateSpriteSheet();\n        });\n        i0.ɵɵtext(5, \"Generate Sprite Sheet\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(6, SpriteGeneratorComponent_div_6_Template, 6, 2, \"div\", 3);\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(6);\n        i0.ɵɵproperty(\"ngIf\", ctx.spriteSheetUrl);\n      }\n    },\n    dependencies: [i1.NgIf],\n    styles: [\".container[_ngcontent-%COMP%] {\\r\\n  text-align: center;\\r\\n  margin-top: 50px;\\r\\n}\\r\\n\\r\\n#output[_ngcontent-%COMP%] {\\r\\n  margin-top: 20px;\\r\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvc3ByaXRlLWdlbmVyYXRvci9zcHJpdGUtZ2VuZXJhdG9yLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDRSxrQkFBa0I7RUFDbEIsZ0JBQWdCO0FBQ2xCOztBQUVBO0VBQ0UsZ0JBQWdCO0FBQ2xCIiwic291cmNlc0NvbnRlbnQiOlsiLmNvbnRhaW5lciB7XHJcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG4gIG1hcmdpbi10b3A6IDUwcHg7XHJcbn1cclxuXHJcbiNvdXRwdXQge1xyXG4gIG1hcmdpbi10b3A6IDIwcHg7XHJcbn0iXSwic291cmNlUm9vdCI6IiJ9 */\"]\n  });\n}","map":{"version":3,"mappings":"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","names":["i0","SpriteGeneratorComponent","constructor","onFileSelected","event","files","Array","from","target","generateSpriteSheet","length","alert","svgs","Promise","all","map","file","readFileAsText","console","log","canvas","document","createElement","size","width","height","ctx","getContext","metadata","svg","index","drawSvgToCanvas","spriteSheetUrl","toDataURL","generateMetadataFile","resolve","reject","reader","FileReader","onload","result","onerror","readAsText","img","Image","x","y","drawImage","push","name","src","btoa","metadataBlob","Blob","JSON","stringify","type","metadataUrl","URL","createObjectURL","downloadLink","href","download","textContent","output","getElementById","appendChild","selectors","decls","vars","consts","template"],"sourceRoot":"","sources":["C:\\Users\\tsternberg\\svg-sprite-generator\\src\\app\\sprite-generator\\sprite-generator.component.html","C:\\Users\\tsternberg\\svg-sprite-generator\\src\\app\\sprite-generator\\sprite-generator.component.ts"],"sourcesContent":["<div class=\"container\">\n    <h1>SVG Sprite Sheet Generator</h1>\n    <input type=\"file\"\n       (change)=\"onFileSelected($event)\"\n       multiple\n       accept=\".svg\">\n    <button (click)=\"generateSpriteSheet()\">Generate Sprite Sheet</button>\n    <div id=\"output\"\n       *ngIf=\"spriteSheetUrl\">\n        <h3>Generated Sprite Sheet</h3>\n        <img [src]=\"spriteSheetUrl\"\n           alt=\"Sprite Sheet\">\n        <a [href]=\"spriteSheetUrl\"\n           download=\"sprite-sheet.png\">Download Sprite Sheet</a>\n        <!-- Metadata download link will be appended here -->\n    </div>\n</div>","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-sprite-generator',\n  templateUrl: './sprite-generator.component.html',\n  styleUrls: ['./sprite-generator.component.css']\n})\nexport class SpriteGeneratorComponent {\n  files: File[] = [];\n  spriteSheetUrl: string | null = null;\n  metadata: any[] = [];\n\n  onFileSelected(event: any): void {\n    this.files = Array.from(event.target.files);\n  }\n\n  async generateSpriteSheet(): Promise<void> {\n    if (this.files.length === 0) {\n      alert('Please select some SVG files');\n      return;\n    }\n\n    const svgs = await Promise.all(this.files.map(file => this.readFileAsText(file)));\n    console.log('svgs.length ', svgs.length)\n    const canvas = document.createElement('canvas');\n    const size = 100;  // Size of each sprite (assuming square sprites for simplicity)\n    canvas.width = size * svgs.length;\n    canvas.height = size;\n    const ctx = canvas.getContext('2d');\n\n    this.metadata = [];\n\n    await Promise.all(svgs.map((svg, index) => this.drawSvgToCanvas(ctx, svg, index, size)));\n\n    this.spriteSheetUrl = canvas.toDataURL('image/png');\n    this.generateMetadataFile();\n  }\n\n  private readFileAsText(file: File): Promise<string> {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.onload = () => resolve(reader.result as string);\n      reader.onerror = reject;\n      reader.readAsText(file);\n    });\n  }\n\n  private drawSvgToCanvas(ctx: CanvasRenderingContext2D | null, svg: string, index: number, size: number): Promise<void> {\n    return new Promise((resolve, reject) => {\n      const img = new Image();\n      img.onload = () => {\n        const x = index * size;\n        const y = 0;\n        const width = size;\n        const height = size;\n\n        ctx?.drawImage(img, x, y, width, height);\n\n        this.metadata.push({\n          name: this.files[index].name,\n          x,\n          y,\n          width,\n          height\n        });\n\n        resolve();\n      };\n      img.onerror = reject;\n      img.src = `data:image/svg+xml;base64,${btoa(svg)}`;\n    });\n  }\n\n  private generateMetadataFile(): void {\n    const metadataBlob = new Blob([JSON.stringify(this.metadata, null, 2)], { type: 'application/json' });\n    const metadataUrl = URL.createObjectURL(metadataBlob);\n\n    const downloadLink = document.createElement('a');\n    downloadLink.href = metadataUrl;\n    downloadLink.download = 'sprite-sheet-metadata.json';\n    downloadLink.textContent = 'Download Metadata';\n\n    console.log('downloadLink ', this.metadata)\n\n    const output = document.getElementById('output');\n    if (output) {\n      output.appendChild(downloadLink);\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}