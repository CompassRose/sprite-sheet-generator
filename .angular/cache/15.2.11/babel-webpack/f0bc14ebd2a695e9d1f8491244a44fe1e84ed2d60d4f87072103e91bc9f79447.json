{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/tsternberg/svg-sprite-generator/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { from, mergeMap } from 'rxjs';\nimport * as Papa from 'papaparse';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../airline-codes.service\";\nimport * as i2 from \"@angular/common/http\";\nimport * as i3 from \"@angular/common\";\nfunction SpriteGeneratorComponent_div_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 4)(1, \"h3\");\n    i0.ɵɵtext(2, \"Generated Sprite Sheet\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(3, \"img\", 5);\n    i0.ɵɵelementStart(4, \"a\", 6);\n    i0.ɵɵtext(5, \"Download Sprite Sheet\");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"src\", ctx_r0.spriteSheetUrl, i0.ɵɵsanitizeUrl);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"href\", ctx_r0.spriteSheetUrl, i0.ɵɵsanitizeUrl);\n  }\n}\nexport class SpriteGeneratorComponent {\n  constructor(airlineCodesService, http) {\n    this.airlineCodesService = airlineCodesService;\n    this.http = http;\n    this.files = [];\n    this.spriteSheetUrl = null;\n    this.metadata = [];\n    this.AirlineCodes = '../../assets/csv/airline-codes.csv';\n    this.columns = 15; // Number of columns in the sprite sheet\n  }\n\n  getCsvData() {\n    return this.http.get(this.airlineCodesService.AirlineCodes, {\n      responseType: 'text'\n    }).pipe(mergeMap(res => {\n      console.log('res ', res);\n      const parsedRes = JSON.parse(res);\n      return from(this.airlineCodesService.parseCSVData(parsedRes));\n    }));\n  }\n  csvJSON(res) {\n    throw new Error('Method not implemented.');\n  }\n  loadAndParseAirportCodes() {\n    // Load the CSV data from a file, a server, etc.\n    // This is just a placeholder - replace this with your actual code to load the CSV data.\n    const csvData = this.AirlineCodes;\n    // Parse the CSV data.\n    this.parseAirportCodes(csvData);\n  }\n  parseAirportCodes(csvData) {\n    return new Promise((resolve, reject) => {\n      console.log('csvData ', csvData);\n      Papa.parse(csvData, {\n        header: true,\n        complete: function (results) {\n          console.log('data ', results.data);\n          resolve(results.data);\n        },\n        error: function (error) {\n          reject(error);\n        }\n      });\n    });\n  }\n  onFileSelected(event) {\n    this.files = Array.from(event.target.files);\n  }\n  generateSpriteSheet() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      if (_this.files.length === 0) {\n        alert('Please select some SVG files');\n        return;\n      }\n      const svgs = yield Promise.all(_this.files.map(file => _this.readFileAsText(file)));\n      const size = 100; // Size of each sprite (assuming square sprites for simplicity)\n      const rows = Math.ceil(svgs.length / _this.columns);\n      const canvas = document.createElement('canvas');\n      canvas.width = size * _this.columns;\n      canvas.height = size * rows;\n      const ctx = canvas.getContext('2d');\n      _this.metadata = [];\n      yield Promise.all(svgs.map((svg, index) => _this.drawSvgToCanvas(ctx, svg, index, size)));\n      _this.spriteSheetUrl = canvas.toDataURL('image/png');\n      _this.generateMetadataFile();\n    })();\n  }\n  readFileAsText(file) {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.onload = () => resolve(reader.result);\n      reader.onerror = reject;\n      reader.readAsText(file);\n    });\n  }\n  drawSvgToCanvas(ctx, svg, index, size) {\n    return new Promise((resolve, reject) => {\n      const img = new Image();\n      img.onload = () => {\n        const col = index % this.columns;\n        const row = Math.floor(index / this.columns);\n        const x = col * size;\n        const y = row * size;\n        const width = size;\n        const height = size;\n        ctx?.drawImage(img, x, y, width, height);\n        this.metadata.push({\n          name: this.files[index].name,\n          x,\n          y,\n          width,\n          height\n        });\n        resolve();\n      };\n      img.onerror = reject;\n      img.src = `data:image/svg+xml;base64,${btoa(svg)}`;\n    });\n  }\n  generateMetadataFile() {\n    const metadataBlob = new Blob([JSON.stringify(this.metadata, null, 2)], {\n      type: 'application/json'\n    });\n    const metadataUrl = URL.createObjectURL(metadataBlob);\n    const downloadLink = document.createElement('a');\n    downloadLink.href = metadataUrl;\n    downloadLink.download = 'sprite-sheet-metadata.json';\n    downloadLink.textContent = 'Download Metadata';\n    console.log('downloadLink ', this.metadata);\n    const output = document.getElementById('output');\n    if (output) {\n      output.appendChild(downloadLink);\n    }\n  }\n  static #_ = this.ɵfac = function SpriteGeneratorComponent_Factory(t) {\n    return new (t || SpriteGeneratorComponent)(i0.ɵɵdirectiveInject(i1.AirlineCodesService), i0.ɵɵdirectiveInject(i2.HttpClient));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: SpriteGeneratorComponent,\n    selectors: [[\"app-sprite-generator\"]],\n    decls: 9,\n    vars: 1,\n    consts: [[1, \"container\"], [\"type\", \"file\", \"multiple\", \"\", \"accept\", \".svg\", 3, \"change\"], [3, \"click\"], [\"id\", \"output\", 4, \"ngIf\"], [\"id\", \"output\"], [\"alt\", \"Sprite Sheet\", 3, \"src\"], [\"download\", \"sprite-sheet.png\", 3, \"href\"]],\n    template: function SpriteGeneratorComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"h1\");\n        i0.ɵɵtext(2, \"SVG Sprite Sheet Generator\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(3, \"input\", 1);\n        i0.ɵɵlistener(\"change\", function SpriteGeneratorComponent_Template_input_change_3_listener($event) {\n          return ctx.onFileSelected($event);\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"button\", 2);\n        i0.ɵɵlistener(\"click\", function SpriteGeneratorComponent_Template_button_click_4_listener() {\n          return ctx.generateSpriteSheet();\n        });\n        i0.ɵɵtext(5, \"Generate Sprite Sheet\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(6, SpriteGeneratorComponent_div_6_Template, 6, 2, \"div\", 3);\n        i0.ɵɵelementStart(7, \"button\", 2);\n        i0.ɵɵlistener(\"click\", function SpriteGeneratorComponent_Template_button_click_7_listener() {\n          return ctx.loadAndParseAirportCodes();\n        });\n        i0.ɵɵtext(8, \"configure codes\");\n        i0.ɵɵelementEnd()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(6);\n        i0.ɵɵproperty(\"ngIf\", ctx.spriteSheetUrl);\n      }\n    },\n    dependencies: [i3.NgIf],\n    styles: [\".container[_ngcontent-%COMP%] {\\r\\n  text-align: center;\\r\\n  margin-top: 50px;\\r\\n}\\r\\n\\r\\n#output[_ngcontent-%COMP%] {\\r\\n  margin-top: 20px;\\r\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvc3ByaXRlLWdlbmVyYXRvci9zcHJpdGUtZ2VuZXJhdG9yLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDRSxrQkFBa0I7RUFDbEIsZ0JBQWdCO0FBQ2xCOztBQUVBO0VBQ0UsZ0JBQWdCO0FBQ2xCIiwic291cmNlc0NvbnRlbnQiOlsiLmNvbnRhaW5lciB7XHJcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG4gIG1hcmdpbi10b3A6IDUwcHg7XHJcbn1cclxuXHJcbiNvdXRwdXQge1xyXG4gIG1hcmdpbi10b3A6IDIwcHg7XHJcbn0iXSwic291cmNlUm9vdCI6IiJ9 */\"]\n  });\n}","map":{"version":3,"mappings":"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","names":["from","mergeMap","Papa","i0","SpriteGeneratorComponent","constructor","airlineCodesService","http","getCsvData","get","AirlineCodes","responseType","pipe","res","console","log","parsedRes","JSON","parse","parseCSVData","csvJSON","Error","loadAndParseAirportCodes","csvData","parseAirportCodes","Promise","resolve","reject","header","complete","results","data","error","onFileSelected","event","files","Array","target","generateSpriteSheet","length","alert","svgs","all","map","file","readFileAsText","size","rows","Math","ceil","columns","canvas","document","createElement","width","height","ctx","getContext","metadata","svg","index","drawSvgToCanvas","spriteSheetUrl","toDataURL","generateMetadataFile","reader","FileReader","onload","result","onerror","readAsText","img","Image","col","row","floor","x","y","drawImage","push","name","src","btoa","metadataBlob","Blob","stringify","type","metadataUrl","URL","createObjectURL","downloadLink","href","download","textContent","output","getElementById","appendChild","selectors","decls","vars","consts","template"],"sourceRoot":"","sources":["C:\\Users\\tsternberg\\svg-sprite-generator\\src\\app\\sprite-generator\\sprite-generator.component.ts","C:\\Users\\tsternberg\\svg-sprite-generator\\src\\app\\sprite-generator\\sprite-generator.component.html"],"sourcesContent":["import { Component } from '@angular/core';\nimport { AirlineCodesService } from '../airline-codes.service';\nimport { Observable, from, map, mergeMap } from 'rxjs';\nimport { HttpClient } from '@angular/common/http';\nimport * as Papa from 'papaparse';\n\n@Component({\n  selector: 'app-sprite-generator',\n  templateUrl: './sprite-generator.component.html',\n  styleUrls: ['./sprite-generator.component.css']\n})\nexport class SpriteGeneratorComponent {\n\n  files: File[] = [];\n  spriteSheetUrl: string | null = null;\n  metadata: any[] = [];\n\n  readonly AirlineCodes = '../../assets/csv/airline-codes.csv';\n\n  columns: number = 15;  // Number of columns in the sprite sheet\n\n  constructor(private airlineCodesService: AirlineCodesService, private http: HttpClient) { }\n\n\n  getCsvData(): Observable<any[]> {\n    return this.http\n      .get(this.airlineCodesService.AirlineCodes, { responseType: 'text' })\n      .pipe(mergeMap(res => {\n        console.log('res ', res)\n        const parsedRes = JSON.parse(res);\n        return from(this.airlineCodesService.parseCSVData(parsedRes));\n      }));\n  }\n\n\n  csvJSON(res: any) {\n    throw new Error('Method not implemented.');\n  }\n\n  loadAndParseAirportCodes(): void {\n    // Load the CSV data from a file, a server, etc.\n    // This is just a placeholder - replace this with your actual code to load the CSV data.\n    const csvData = this.AirlineCodes;\n\n    // Parse the CSV data.\n    this.parseAirportCodes(csvData);\n  }\n\n  parseAirportCodes(csvData: string): Promise<any[]> {\n\n    return new Promise((resolve, reject) => {\n      console.log('csvData ', csvData)\n      Papa.parse(csvData, {\n        header: true,\n        complete: function (results: { data: any[] | PromiseLike<any[]>; }) {\n          console.log('data ', results.data)\n          resolve(results.data);\n        },\n        error: function (error: Error) {\n          reject(error);\n        }\n      });\n    });\n  }\n  onFileSelected(event: any): void {\n    this.files = Array.from(event.target.files);\n  }\n\n  async generateSpriteSheet(): Promise<void> {\n    if (this.files.length === 0) {\n      alert('Please select some SVG files');\n      return;\n    }\n\n    const svgs = await Promise.all(this.files.map(file => this.readFileAsText(file)));\n    const size = 100;  // Size of each sprite (assuming square sprites for simplicity)\n    const rows = Math.ceil(svgs.length / this.columns);\n    const canvas = document.createElement('canvas');\n    canvas.width = size * this.columns;\n    canvas.height = size * rows;\n    const ctx = canvas.getContext('2d');\n\n    this.metadata = [];\n\n    await Promise.all(svgs.map((svg, index) => this.drawSvgToCanvas(ctx, svg, index, size)));\n\n    this.spriteSheetUrl = canvas.toDataURL('image/png');\n    this.generateMetadataFile();\n  }\n\n  private readFileAsText(file: File): Promise<string> {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.onload = () => resolve(reader.result as string);\n      reader.onerror = reject;\n      reader.readAsText(file);\n    });\n  }\n\n  private drawSvgToCanvas(ctx: CanvasRenderingContext2D | null, svg: string, index: number, size: number): Promise<void> {\n    return new Promise((resolve, reject) => {\n      const img = new Image();\n      img.onload = () => {\n        const col = index % this.columns;\n        const row = Math.floor(index / this.columns);\n        const x = col * size;\n        const y = row * size;\n        const width = size;\n        const height = size;\n\n        ctx?.drawImage(img, x, y, width, height);\n\n        this.metadata.push({\n          name: this.files[index].name,\n          x,\n          y,\n          width,\n          height\n        });\n\n        resolve();\n      };\n      img.onerror = reject;\n      img.src = `data:image/svg+xml;base64,${btoa(svg)}`;\n    });\n  }\n\n  private generateMetadataFile(): void {\n    const metadataBlob = new Blob([JSON.stringify(this.metadata, null, 2)], { type: 'application/json' });\n    const metadataUrl = URL.createObjectURL(metadataBlob);\n\n    const downloadLink = document.createElement('a');\n    downloadLink.href = metadataUrl;\n    downloadLink.download = 'sprite-sheet-metadata.json';\n    downloadLink.textContent = 'Download Metadata';\n\n    console.log('downloadLink ', this.metadata)\n\n    const output = document.getElementById('output');\n    if (output) {\n      output.appendChild(downloadLink);\n    }\n  }\n}\n","<div class=\"container\">\n   <h1>SVG Sprite Sheet Generator</h1>\n   <input type=\"file\"\n      (change)=\"onFileSelected($event)\"\n      multiple\n      accept=\".svg\">\n   <button (click)=\"generateSpriteSheet()\">Generate Sprite Sheet</button>\n   <div id=\"output\"\n      *ngIf=\"spriteSheetUrl\">\n      <h3>Generated Sprite Sheet</h3>\n      <img [src]=\"spriteSheetUrl\"\n         alt=\"Sprite Sheet\">\n      <a [href]=\"spriteSheetUrl\"\n         download=\"sprite-sheet.png\">Download Sprite Sheet</a>\n\n      <!-- Metadata download link will be appended here -->\n   </div>\n   <button (click)=\"loadAndParseAirportCodes()\">configure codes</button>\n   <!-- <button (click)=\"parseAirportCodes()\">configure codes</button> -->\n</div>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}